import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
import sqlite3
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="–í–ê–®_TELEGRAM_BOT_TOKEN")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω!
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect('notocoin.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–≥—Ä–æ–∫–æ–≤
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    coins INTEGER DEFAULT 0,
    per_click INTEGER DEFAULT 1
)
''')
conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è Web App
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    web_app_button = KeyboardButton(
        text="üéÆ –û—Ç–∫—Ä—ã—Ç—å NFT-–∫–ª–∏–∫–µ—Ä",
        web_app=WebAppInfo(url="https://–í–ê–®_WEB_APP_URL.vercel.app")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL!
    )
    markup.add(web_app_button)
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NFT-–∫–ª–∏–∫–µ—Ä!\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã.",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
@dp.message_handler(content_types=['web_app_data'])
async def handle_web_app_data(message: types.Message):
    user_id = message.from_user.id
    data = json.loads(message.web_app_data.data)
    
    if data['action'] == 'get_data':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        cursor.execute("SELECT coins, per_click FROM users WHERE user_id = ?", (user_id,))
        user_data = cursor.fetchone()
        if user_data:
            coins, per_click = user_data
            await bot.send_message(
                chat_id=message.chat.id,
                text=json.dumps({
                    'coins': coins,
                    'per_click': per_click
                }),
                reply_to_message_id=message.message_id
            )
    
    elif data['action'] == 'update':
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        coins = data.get('coins', 0)
        per_click = data.get('per_click', 1)
        cursor.execute(
            "UPDATE users SET coins = ?, per_click = ? WHERE user_id = ?",
            (coins, per_click, user_id)
        )
        conn.commit()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)