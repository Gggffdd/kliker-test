import os
import random
import logging
from flask import Flask, request, jsonify
import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ –±–æ—Ç–∞
app = Flask(__name__)
bot = telebot.TeleBot(os.getenv('TELEGRAM_TOKEN'))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    'WEBHOOK_SECRET': os.getenv('WEBHOOK_SECRET', 'default_secret_key'),
    'VERCEL_URL': os.getenv('VERCEL_URL', 'https://kliker-test.vercel.app'),
    'INITIAL_BALANCE': 1000,
    'MIN_BET': 10,
    'MAX_BET': 1000
}

# –ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
SLOT_SYMBOLS = ['üçí', 'üçã', 'üçá', 'üçâ', 'üîî', 'üíé', '7Ô∏è‚É£', 'üê∂']
PAYOUTS = {
    'üíé': {3: 5, 4: 20, 5: 100},
    'üê∂': {3: 3, 4: 10, 5: 50},
    '7Ô∏è‚É£': {3: 2, 4: 7, 5: 25},
    'üîî': {3: 1, 4: 3, 5: 10}
}

# "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –≤ –ø–∞–º—è—Ç–∏
users_db = {}

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã"""
    return "üé∞ Dog House Slots Bot is Running! üê∂"

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != CONFIG['WEBHOOK_SECRET']:
        logger.warning("Unauthorized webhook attempt")
        return jsonify({"error": "Forbidden"}), 403

    try:
        update = telebot.types.Update.de_json(request.get_json())
        bot.process_new_updates([update])
        return jsonify({"status": "ok"}), 200
    except Exception as e:
        logger.error(f"Webhook processing error: {e}")
        return jsonify({"error": "Internal server error"}), 500

def get_user(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in users_db:
        users_db[user_id] = {
            'balance': CONFIG['INITIAL_BALANCE'],
            'bet': 100
        }
    return users_db[user_id]

def create_keyboard(user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    user = get_user(user_id)
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton(
            text=f"üé∞ Spin ({user['bet']})", 
            callback_data="spin"
        ),
        types.InlineKeyboardButton(
            text=f"üí∞ {user['balance']} coins", 
            callback_data="balance"
        ),
        types.InlineKeyboardButton(
            text="‚öôÔ∏è Change Bet", 
            callback_data="change_bet"
        )
    )
    return keyboard

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = get_user(message.from_user.id)
        bot.send_message(
            message.chat.id,
            f"üê∂ Welcome to Dog House Slots!\n\n"
            f"üí∞ Balance: {user['balance']} coins\n"
            f"ü™ô Current bet: {user['bet']} coins\n\n"
            "Use the buttons below to play:",
            reply_markup=create_keyboard(message.from_user.id)
        )
    except Exception as e:
        logger.error(f"Start command error: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'spin')
def spin_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤"""
    try:
        user = get_user(call.from_user.id)
        
        if user['balance'] < user['bet']:
            bot.answer_callback_query(call.id, "‚ùå Not enough coins!")
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = [random.choice(SLOT_SYMBOLS) for _ in range(5)]
        win = calculate_win(result, user['bet'])
        user['balance'] += win - user['bet']
        
        # –û—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üé∞ {' '.join(result)}\n\n"
                 f"üíé Win: {win} coins\n"
                 f"üí∞ Balance: {user['balance']} coins",
            reply_markup=create_keyboard(call.from_user.id)
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Spin error: {e}")

def calculate_win(result, bet):
    """–†–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞"""
    win = 0
    for symbol in set(result):
        count = result.count(symbol)
        if symbol in PAYOUTS and count >= 3:
            win += bet * PAYOUTS[symbol][min(count, 5)]
    return win

@bot.callback_query_handler(func=lambda call: call.data == 'change_bet')
def change_bet_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏"""
    try:
        user = get_user(call.from_user.id)
        keyboard = types.InlineKeyboardMarkup(row_width=3)
        keyboard.add(
            types.InlineKeyboardButton("-10", callback_data="bet_down"),
            types.InlineKeyboardButton(f"{user['bet']}", callback_data="bet_current"),
            types.InlineKeyboardButton("+10", callback_data="bet_up"),
            types.InlineKeyboardButton("üîô Back", callback_data="menu_back")
        )
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚öôÔ∏è Current bet: {user['bet']} coins\n"
                 f"Min: {CONFIG['MIN_BET']}, Max: {CONFIG['MAX_BET']}",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Change bet error: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('bet_'))
def bet_adjust_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–∞–≤–∫–∏"""
    try:
        user = get_user(call.from_user.id)
        action = call.data.split('_')[1]
        
        if action == 'up':
            user['bet'] = min(user['bet'] + 10, CONFIG['MAX_BET'])
        elif action == 'down':
            user['bet'] = max(user['bet'] - 10, CONFIG['MIN_BET'])
        
        change_bet_handler(call)
    except Exception as e:
        logger.error(f"Bet adjust error: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'menu_back')
def back_to_menu(call):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user = get_user(call.from_user.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üê∂ Dog House Slots\n\n"
                 f"üí∞ Balance: {user['balance']} coins\n"
                 f"ü™ô Current bet: {user['bet']} coins",
            reply_markup=create_keyboard(call.from_user.id)
        )
    except Exception as e:
        logger.error(f"Back to menu error: {e}")

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    try:
        bot.remove_webhook()
        bot.set_webhook(
            url=f"{CONFIG['VERCEL_URL']}/webhook",
            secret_token=CONFIG['WEBHOOK_SECRET'],
            drop_pending_updates=True
        )
        logger.info(f"Webhook set up for {CONFIG['VERCEL_URL']}")
    except Exception as e:
        logger.error(f"Webhook setup error: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
setup_webhook()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
