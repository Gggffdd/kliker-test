import os
import logging
import telebot
import requests
import json
from datetime import datetime, timedelta
import threading
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CRYPTOPAY_TOKEN = os.getenv('CRYPTOPAY_TOKEN')
SERVER_URL = os.getenv('SERVER_URL')
BOT_USERNAME = os.getenv('BOT_USERNAME')  # –ë–µ–∑ @

bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–ª–∞—Ç–µ–∂–µ–π
payments = {}

@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ paymentId –≤ –∫–æ–º–∞–Ω–¥–µ
        if len(message.text.split()) > 1:
            payment_id = message.text.split()[1]
            logger.info(f"üöÄ Payment session started: {payment_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            payments[payment_id] = {
                'chat_id': message.chat.id,
                'status': 'processing',
                'created_at': datetime.now()
            }
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ CryptoPay
            response = create_crypto_invoice(
                amount=10.00,
                asset='USDT',
                description=f"Premium Subscription - {payment_id}",
                payload=json.dumps({
                    'payment_id': payment_id,
                    'user_id': message.from_user.id
                })
            )
            
            if response and 'result' in response:
                invoice = response['result']
                payments[payment_id]['invoice_id'] = invoice['id']
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
                markup = telebot.types.InlineKeyboardMarkup()
                btn = telebot.types.InlineKeyboardButton(
                    text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", 
                    url=invoice['pay_url']
                )
                markup.add(btn)
                
                bot.send_message(
                    message.chat.id,
                    "üîê –û–ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É:\n\n"
                    f"–°—É–º–º–∞: 10.00 USDT\n"
                    "–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç\n\n"
                    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                    reply_markup=markup
                )
                
                # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
                bot.send_message(
                    message.chat.id,
                    "‚ÑπÔ∏è –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n"
                    "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
                    "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—à–µ–ª–µ–∫, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π TRC-20\n"
                    "3. –î–ª—è –ø–æ–º–æ—â–∏: @your_support"
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            bot.send_message(
                message.chat.id,
                "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Å–∞–π—Ç–∞."
            )
            
    except Exception as e:
        logger.error(f"üî• Error in start handler: {str(e)}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def create_crypto_invoice(amount, asset, description, payload):
    url = "https://pay.crypt.bot/api/createInvoice"
    headers = {
        "Crypto-Pay-API-Token": CRYPTOPAY_TOKEN,
        "Content-Type": "application/json"
    }
    data = {
        "asset": asset,
        "amount": str(amount),
        "description": description,
        "payload": payload,
        "paid_btn_name": "open_bot",
        "paid_btn_url": f"https://t.me/{BOT_USERNAME}",
        "allow_anonymous": False,
        "expires_in": 900  # 15 –º–∏–Ω—É—Ç
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=10)
        response.raise_for_status()
        result = response.json()
        logger.info(f"CryptoPay response: {result}")
        
        if result.get('ok'):
            return result
        else:
            logger.error(f"‚ùå CryptoPay error: {result.get('error')}")
            return None
            
    except Exception as e:
        logger.error(f"üî• Error creating invoice: {str(e)}")
        return None

def check_expired_payments():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    now = datetime.now()
    
    for payment_id, payment in list(payments.items()):
        if payment['status'] == 'processing':
            created = payment['created_at']
            if now > created + timedelta(minutes=16):  # +1 –º–∏–Ω—É—Ç–∞ –∫ —Å—Ä–æ–∫—É
                try:
                    chat_id = payment['chat_id']
                    bot.send_message(
                        chat_id,
                        "‚åõ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑."
                    )
                    payments[payment_id]['status'] = 'expired'
                    logger.info(f"‚è≥ Payment expired: {payment_id}")
                except Exception as e:
                    logger.error(f"üî• Error handling expired payment: {str(e)}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
def run_payment_checker():
    while True:
        check_expired_payments()
        threading.Event().wait(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

if __name__ == '__main__':
    logger.info("üöÄ Starting Crypto Payment Bot...")
    logger.info(f"üåê Using SERVER_URL: {SERVER_URL}")
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=run_payment_checker, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.infinity_polling()
