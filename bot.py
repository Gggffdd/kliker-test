import os
import telebot
import random
from flask import Flask, request, jsonify
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '7523520150:AAGMPibPAl8D0I0E6ZeNR3zuIp0qKcshXN0')
SERVER_URL = os.getenv('SERVER_URL', 'https://yourdomain.com')

bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

# –ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç–æ–≤
SLOT_SYMBOLS = ['üçí', 'üçã', 'üçá', 'üçâ', 'üîî', 'üíé', '7Ô∏è‚É£', 'üê∂']
PAYOUTS = {
    'üíé': {3: 5, 4: 20, 5: 100},
    'üê∂': {3: 3, 4: 10, 5: 50},
    'üîî': {3: 2, 4: 7, 5: 25},
    'üçá': {3: 1, 4: 3, 5: 10}
}

class User:
    def __init__(self, user_id):
        self.user_id = user_id
        self.balance = 0
        self.bet = 100

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = User(user_id)
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üé∞ –ò–≥—Ä–∞—Ç—å", callback_data="play_slot"))
    markup.add(InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit"))
    
    bot.send_message(
        user_id,
        f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dog House Slots!\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[user_id].balance} ‚ÇΩ\n"
        f"ü™ô –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user_data[user_id].bet} ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    if user_id not in user_data:
        user_data[user_id] = User(user_id)
    
    if call.data == "play_slot":
        play_slot(user_id)
    elif call.data == "deposit":
        show_deposit_options(user_id)
    elif call.data.startswith("bet_"):
        handle_bet_change(user_id, call.data)
    elif call.data == "back_to_menu":
        handle_start(call.message)

def play_slot(user_id):
    user = user_data[user_id]
    
    if user.balance < user.bet:
        bot.send_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
        return
    
    # –°–ø–∏–Ω
    user.balance -= user.bet
    result = [random.choice(SLOT_SYMBOLS) for _ in range(5)]
    
    # –†–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
    win = 0
    for symbol in set(result):
        count = result.count(symbol)
        if symbol in PAYOUTS and count >= 3:
            win += user.bet * PAYOUTS[symbol][min(count, 5)]
    
    user.balance += win
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n" + " ".join(result) + "\n\n"
    if win > 0:
        message += f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} ‚ÇΩ!\n"
    else:
        message += "üò¢ –ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!\n"
    
    message += f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} ‚ÇΩ"
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîÑ –ö—Ä—É—Ç–∏—Ç—å –µ—â–µ", callback_data="play_slot"))
    markup.add(InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"))
    markup.add(InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet"))
    
    bot.send_message(user_id, message, reply_markup=markup)

def show_deposit_options(user_id):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", callback_data="cryptobot_payment"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    
    bot.send_message(
        user_id,
        "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=markup
    )

def handle_bet_change(user_id, action):
    user = user_data[user_id]
    
    if action == "bet_up":
        user.bet += 50
    elif action == "bet_down" and user.bet > 50:
        user.bet -= 50
    
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚¨áÔ∏è", callback_data="bet_down"),
        InlineKeyboardButton(f"{user.bet} ‚ÇΩ", callback_data="current_bet"),
        InlineKeyboardButton("‚¨ÜÔ∏è", callback_data="bet_up")
    )
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    
    bot.edit_message_text(
        f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏\n\n–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user.bet} ‚ÇΩ",
        user_id,
        message_id=call.message.message_id,
        reply_markup=markup
    )

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route('/telegram-webhook', methods=['POST'])
def telegram_webhook():
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != os.getenv('WEBHOOK_SECRET'):
        return jsonify({"status": "error", "message": "Unauthorized"}), 401
    
    update = telebot.types.Update.de_json(request.get_json(force=True))
    bot.process_new_updates([update])
    return jsonify({"status": "success"}), 200

def run_flask():
    app.run(host='0.0.0.0', port=5000)

if __name__ == '__main__':
    # –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ webhook'–∏
    bot.remove_webhook()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π webhook
    webhook_url = f"{SERVER_URL}/telegram-webhook"
    bot.set_webhook(
        url=webhook_url,
        secret_token=os.getenv('WEBHOOK_SECRET', 'your_webhook_secret')
    )
    print(f"Webhook set to: {webhook_url}")
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å Flask
    from threading import Thread
    flask_thread = Thread(target=run_flask)
    flask_thread.start()
