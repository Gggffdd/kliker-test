import os
import random
import logging
from flask import Flask, request, jsonify
import telebot
from telebot import types

# ======================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ======================
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET', '–≤–∞—à_—Å–µ–∫—Ä–µ—Ç–Ω—ã–π_–∫–ª—é—á')  # –õ—é–±–∞—è —Å–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
VERCEL_URL = os.getenv('VERCEL_URL', 'https://kliker-test.vercel.app')  # –í–∞—à –¥–æ–º–µ–Ω

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
INITIAL_BALANCE = 1000
MIN_BET = 10
MAX_BET = 500

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = Flask(__name__)
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ======================
# –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê
# ======================
SLOT_SYMBOLS = ['üçí', 'üçã', 'üçá', 'üçâ', 'üîî', 'üíé', '7Ô∏è‚É£', 'üê∂']
PAYOUTS = {
    'üíé': {3: 10, 4: 50, 5: 200},
    'üê∂': {3: 5, 4: 25, 5: 100},
    '7Ô∏è‚É£': {3: 3, 4: 15, 5: 75},
    'üîî': {3: 2, 4: 10, 5: 50}
}

# "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis/PostgreSQL)
users_db = {}

class User:
    def __init__(self, user_id):
        self.user_id = user_id
        self.balance = INITIAL_BALANCE
        self.bet = 100
        self.last_spin = None

    def to_dict(self):
        return {
            'balance': self.balance,
            'bet': self.bet,
            'last_spin': self.last_spin
        }

def get_user(user_id):
    if user_id not in users_db:
        users_db[user_id] = User(user_id)
    return users_db[user_id]

def calculate_win(result, bet):
    win = 0
    for symbol in set(result):
        count = result.count(symbol)
        if symbol in PAYOUTS and count >= 3:
            win += bet * PAYOUTS[symbol][min(count, 5)]
    return win

# ======================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# ======================
def create_main_menu(user_id):
    user = get_user(user_id)
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(f"üé∞ –ö—Ä—É—Ç–∏—Ç—å ({user.bet})", callback_data="spin"),
        types.InlineKeyboardButton(f"üí∞ {user.balance} –º–æ–Ω–µ—Ç", callback_data="balance"),
        types.InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="change_bet")
    )
    return markup

def create_bet_menu(user_id):
    user = get_user(user_id)
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton("-10", callback_data="bet_down"),
        types.InlineKeyboardButton(f"{user.bet}", callback_data="bet_current"),
        types.InlineKeyboardButton("+10", callback_data="bet_up"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_back")
    )
    return markup

# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ======================
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    try:
        user = get_user(message.from_user.id)
        bot.send_message(
            message.chat.id,
            f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dog House Slots!\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç\n"
            f"ü™ô –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user.bet} –º–æ–Ω–µ—Ç\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–≥—Ä—ã:",
            reply_markup=create_main_menu(message.from_user.id)
        )
    except Exception as e:
        logger.error(f"Error in send_welcome: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'spin')
def spin_handler(call):
    try:
        user = get_user(call.from_user.id)
        
        if user.balance < user.bet:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = [random.choice(SLOT_SYMBOLS) for _ in range(5)]
        win = calculate_win(result, user.bet)
        user.balance += win - user.bet
        user.last_spin = {'result': result, 'win': win}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        message = f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {' '.join(result)}\n\n"
        if win > 0:
            message += f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç!\n"
        else:
            message += "üò¢ –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!\n"
        message += f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message,
            reply_markup=create_main_menu(call.from_user.id)
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in spin_handler: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'change_bet')
def change_bet_handler(call):
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚öôÔ∏è –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {get_user(call.from_user.id).bet} –º–æ–Ω–µ—Ç\n"
                 f"–ú–∏–Ω–∏–º—É–º: {MIN_BET}, –ú–∞–∫—Å–∏–º—É–º: {MAX_BET}",
            reply_markup=create_bet_menu(call.from_user.id)
        )
    except Exception as e:
        logger.error(f"Error in change_bet_handler: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('bet_'))
def bet_adjust_handler(call):
    try:
        user = get_user(call.from_user.id)
        action = call.data.split('_')[1]
        
        if action == 'up':
            user.bet = min(user.bet + 10, MAX_BET)
        elif action == 'down':
            user.bet = max(user.bet - 10, MIN_BET)
        
        change_bet_handler(call)
    except Exception as e:
        logger.error(f"Error in bet_adjust_handler: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'menu_back')
def back_to_menu(call):
    try:
        user = get_user(call.from_user.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üé∞ Dog House Slots\n\n"
                 f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç\n"
                 f"ü™ô –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user.bet} –º–æ–Ω–µ—Ç",
            reply_markup=create_main_menu(call.from_user.id)
        )
    except Exception as e:
        logger.error(f"Error in back_to_menu: {e}")

# ======================
# WEBHOOK –ò –ó–ê–ü–£–°–ö
# ======================
@app.route('/')
def home():
    return "üé∞ Dog House Slots Bot is Running! üê∂"

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != WEBHOOK_SECRET:
        return jsonify({"error": "Unauthorized"}), 403
    
    try:
        update = telebot.types.Update.de_json(request.get_json())
        bot.process_new_updates([update])
        return jsonify({"status": "ok"}), 200
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({"error": "Internal server error"}), 500

def setup_webhook():
    try:
        bot.remove_webhook()
        bot.set_webhook(
            url=f"{VERCEL_URL}/webhook",
            secret_token=WEBHOOK_SECRET,
            drop_pending_updates=True
        )
        logger.info(f"Webhook configured for {VERCEL_URL}")
    except Exception as e:
        logger.error(f"Webhook setup error: {e}")

if __name__ == '__main__':
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
    logger.info("Starting bot in polling mode...")
    bot.remove_webhook()
    bot.polling(none_stop=True)
else:
    # –ó–∞–ø—É—Å–∫ –Ω–∞ Vercel
    setup_webhook()
